name: Release

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

env:
  PRODUCT: ipfs-pinner

permissions: write-all
jobs:
  build:
    name: Build
    strategy:
      matrix:
        os: [ linux, freebsd, openbsd, dragonfly, windows, darwin ]
        arch: [ amd64, 386 ]
        include:
          - os: linux
            arch: arm
            arm: 5
          - os: linux
            arch: arm
            arm: 6
          - os: linux
            arch: arm
            arm: 7
          - os: linux
            arch: arm64
          - os: linux
            arch: mips
            mips: softfloat
          - os: linux
            arch: mips
            mips: hardfloat
          - os: linux
            arch: mipsle
            mipsle: softfloat
          - os: linux
            arch: mipsle
            mipsle: hardfloat
          - os: linux
            arch: mips64
          - os: linux
            arch: mips64le
          - os: linux
            arch: ppc64
          - os: linux
            arch: ppc64le
          - os: linux
            arch: s390x
          - os: windows
            arch: arm
          - os: windows
            arch: arm64
          - os: android
            arch: arm64
          - os: darwin
            arch: arm64
          - os: freebsd
            arch: arm64
        exclude:
          - os: darwin
            arch: 386
          - os: dragonfly
            arch: 386
      fail-fast: false
    runs-on: ubuntu-latest
    env:
      GOOS: ${{ matrix.os }}
      GOARCH: ${{ matrix.arch }}
      GOARM: ${{ matrix.arm }}
      GOMIPS: ${{ matrix.mips }}
      GOMIPS64: ${{ matrix.mips64 }}
      GOMIPSLE: ${{ matrix.mipsle }}
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Go 1.x
      uses: actions/setup-go@v4
      with:
        go-version: ^1.17

    - name: Build fat binary
      id: builder
      run: |
        ARGS="${GOOS}-${GOARCH}"
        if [[ -n "${GOARM}" ]]; then
          ARGS="${ARGS}v${GOARM}"
        elif [[ -n "${GOMIPS}" ]]; then
          ARGS="${ARGS}-${GOMIPS}"
        elif [[ -n "${GOMIPS64}" ]]; then
          ARGS="${ARGS}-${GOMIPS64}"
        elif [[ -n "${GOMIPSLE}" ]]; then
          ARGS="${ARGS}-${GOMIPSLE}"
        fi
        make ${ARGS}
        echo "args=${ARGS}" >> $GITHUB_OUTPUT

    - name: Archive binary
      run: make TARGET=${{ steps.builder.outputs.args }} releases

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PRODUCT }}
        path: build/package/${{ env.PRODUCT }}*

  checksum:
    name: Get archived packages checksum
    runs-on: ubuntu-latest
    needs: build
    outputs:
      digest: ${{ steps.digest.outputs.result }}
    steps:
    - name: Download math result from build job
      uses: actions/download-artifact@v2
      with:
        name: ${{ env.PRODUCT }}
        path: .

    - name: Create all binary digest
      id: digest
      run: |
        digest=$(find ipfs-pinner* -type f -exec sha256sum {} +)
        digest="${digest//$'%'/%25}"
        digest="${digest//$'\n'/%0A}"
        echo "result=${digest}" >> $GITHUB_OUTPUT

  release:
    name: Create and upload release
    runs-on: ubuntu-latest
    needs: [build, checksum]
    steps:
    - name: Check out code base
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Download math result from build and checksum jobs
      uses: actions/download-artifact@v2
      with:
        name: ${{ env.PRODUCT }}
        path: ${{ env.PRODUCT }} # Put files to ipfs-pinner directory

    - name: Generate Git log
      run: |
        git fetch origin +refs/tags/*:refs/tags/*
        echo "Current Tag: ${GITHUB_REF}"
        git checkout ${GITHUB_REF} -b release-log
        GITVER=$(git describe --tags)
        PREVVER=$(git describe --tags --abbrev=0 ${GITVER}~1)
        git log --oneline ${PREVVER}..${GITVER} > gittaglogs.txt
        MORE=$(echo "See more on [releases](https://github.com/${{ github.repository }}/releases)")
        echo -e "*Release ${GITVER}* #ipfspinner\n" > release-note.md
        cut -c9- gittaglogs.txt | sed -e 's/^/- /' | sed -e 's/\"/\\"/g' >> release-note.md
        echo -e "\n${MORE}" | tee -a release-note.md gittaglogs.txt > /dev/null
        # Append digests
        echo '
        **Digests in this release:**
        ```
        ${{ needs.checksum.outputs.digest }}
        ```
        ' >> gittaglogs.txt

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: release-note
        path: release-note.md

    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        body_path: gittaglogs.txt
        files: ${{ env.PRODUCT }}/*${{ env.PRODUCT }}*
        prerelease: true
        draft: false

  notification:
    if: github.repository == 'wabarc/ipfs-pinner'
    name: Send Notification
    runs-on: ubuntu-latest
    needs: [release]
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: release-note
        path: .

    - name: Send release note to Telegram channel
      continue-on-error: true
      run: |
        TEXT="$(cat release-note.md)"
        echo -e "${TEXT}"
        curl --silent --output /dev/null --show-error --fail -X POST \
             -H 'Content-Type: application/json' \
             -d '{"chat_id": "${{ secrets.TELEGRAM_TO }}", "text": "'"${TEXT}"'", "parse_mode": "markdown"}' \
             "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage"

